name: Test Conservative Twitter Strategy

on:
  push:
    paths:
      - 'test-conservative-twitter-outreach.js'
      - 'utils/twitter-outreach-strategy.js'
      - 'utils/twitter-dm-client.js'
  pull_request:
    paths:
      - 'test-conservative-twitter-outreach.js'
      - 'utils/twitter-outreach-strategy.js'
      - 'utils/twitter-dm-client.js'
  schedule:
    # Run strategy tests daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - rate_limits
        - lead_qualification
        - outreach_sequences
        - api_validation

env:
  NODE_VERSION: '18'

jobs:
  # Test rate limiting and API quotas
  test-rate-limits:
    name: Test Rate Limits & API Quotas
    runs-on: ubuntu-latest
    if: github.event.inputs.test_mode == 'all' || github.event.inputs.test_mode == 'rate_limits' || github.event.inputs.test_mode == null
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test environment
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          TWITTER_API_KEY=test_key
          TWITTER_API_SECRET=test_secret
          TWITTER_ACCESS_TOKEN=test_token
          TWITTER_ACCESS_SECRET=test_secret
          TWITTER_BEARER_TOKEN=test_bearer
          TEST_MODE=rate_limits
          EOF

      - name: Test conservative rate limits
        run: |
          echo "🧪 Testing Conservative Rate Limits..."
          node -e "
            const TwitterOutreachStrategy = require('./utils/twitter-outreach-strategy');
            const strategy = new TwitterOutreachStrategy();
            
            const limits = strategy.getConservativeLimits();
            console.log('Conservative Daily Limits:');
            console.log(JSON.stringify(limits, null, 2));
            
            // Validate limits are within Twitter's guidelines
            const maxDaily = {
              userLookup: 30,
              tweetLookup: 20,
              follow: 15,
              like: 25,
              dmSend: 5
            };
            
            let allValid = true;
            Object.keys(limits).forEach(key => {
              if (limits[key] > maxDaily[key]) {
                console.log('❌ Rate limit too high for', key);
                allValid = false;
              }
            });
            
            if (allValid) {
              console.log('✅ All rate limits are conservative');
            } else {
              process.exit(1);
            }
          "

      - name: Test API quota management
        run: |
          echo "📊 Testing API Quota Management..."
          node -e "
            const TwitterDMClient = require('./utils/twitter-dm-client');
            const client = new TwitterDMClient();
            
            // Simulate quota tracking
            const quota = {
              userLookup: { remaining: 25, used: 5, limit: 30 },
              tweetLookup: { remaining: 15, used: 5, limit: 20 },
              follow: { remaining: 12, used: 3, limit: 15 },
              like: { remaining: 20, used: 5, limit: 25 },
              dmSend: { remaining: 4, used: 1, limit: 5 }
            };
            
            console.log('Current API Quota Status:');
            Object.keys(quota).forEach(key => {
              const q = quota[key];
              const usage = ((q.used / q.limit) * 100).toFixed(1);
              console.log(\`\${key}: \${q.remaining}/\${q.limit} remaining (\${usage}% used)\`);
            });
            
            // Check if we're approaching limits
            const approachingLimit = Object.values(quota).some(q => (q.used / q.limit) > 0.8);
            if (approachingLimit) {
              console.log('⚠️  Approaching API limits - should pause operations');
            } else {
              console.log('✅ API quota usage is safe');
            }
          "

  # Test lead qualification logic
  test-lead-qualification:
    name: Test Lead Qualification Logic
    runs-on: ubuntu-latest
    if: github.event.inputs.test_mode == 'all' || github.event.inputs.test_mode == 'lead_qualification' || github.event.inputs.test_mode == null
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test lead qualification scenarios
        run: |
          echo "🔍 Testing Lead Qualification Scenarios..."
          node -e "
            const TwitterOutreachStrategy = require('./utils/twitter-outreach-strategy');
            const strategy = new TwitterOutreachStrategy();
            
            // Test scenarios
            const testLeads = [
              {
                name: 'Sarah Chen',
                username: 'sarah_tech',
                bio: 'AI Product Manager at TechCorp. Building the future of automation.',
                followerCount: 2500,
                recentTweets: [
                  { text: 'Just launched our new AI automation tool! 🚀', engagement: { likes: 45, comments: 8 } }
                ],
                lastActivity: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
                keywords: ['AI', 'automation', 'SaaS'],
                industry: 'technology',
                hasEngagedWithUs: true,
                mutualConnections: ['john_doe', 'jane_smith']
              },
              {
                name: 'Alex Bot',
                username: 'alex_bot_follower',
                bio: 'Get 10k followers fast! Buy followers now!',
                followerCount: 500,
                recentTweets: [
                  { text: 'Follow me and I follow back!', engagement: { likes: 2, comments: 0 } }
                ],
                lastActivity: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
                keywords: ['follow', 'followers'],
                industry: 'social media',
                hasEngagedWithUs: false,
                mutualConnections: []
              }
            ];
            
            let passedTests = 0;
            let totalTests = 0;
            
            testLeads.forEach((lead, index) => {
              console.log(\`\\n--- Testing Lead \${index + 1}: \${lead.name} ---\`);
              
              const worthResearching = strategy.isWorthResearching(lead);
              const worthEngaging = strategy.isWorthEngaging(lead);
              const highlyQualified = strategy.isHighlyQualified(lead);
              
              console.log(\`Worth Researching: \${worthResearching}\`);
              console.log(\`Worth Engaging: \${worthEngaging}\`);
              console.log(\`Highly Qualified: \${highlyQualified}\`);
              
              // Validate logic
              if (lead.name.includes('Bot') && (worthEngaging || highlyQualified)) {
                console.log('❌ Bot should not be qualified');
              } else if (lead.name === 'Sarah Chen' && !worthEngaging) {
                console.log('❌ Qualified lead should be worth engaging');
              } else {
                console.log('✅ Qualification logic correct');
                passedTests++;
              }
              totalTests++;
            });
            
            console.log(\`\\n📊 Qualification Tests: \${passedTests}/\${totalTests} passed\`);
            if (passedTests === totalTests) {
              console.log('✅ All qualification tests passed');
            } else {
              process.exit(1);
            }
          "

  # Test outreach sequence generation
  test-outreach-sequences:
    name: Test Outreach Sequence Generation
    runs-on: ubuntu-latest
    if: github.event.inputs.test_mode == 'all' || github.event.inputs.test_mode == 'outreach_sequences' || github.event.inputs.test_mode == null
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test outreach sequence generation
        run: |
          echo "📋 Testing Outreach Sequence Generation..."
          node -e "
            const TwitterOutreachStrategy = require('./utils/twitter-outreach-strategy');
            const strategy = new TwitterOutreachStrategy();
            
            const mockQuota = {
              userLookup: { remaining: 25, used: 5, limit: 30 },
              tweetLookup: { remaining: 15, used: 5, limit: 20 },
              follow: { remaining: 12, used: 3, limit: 15 },
              like: { remaining: 20, used: 5, limit: 25 },
              dmSend: { remaining: 4, used: 1, limit: 5 }
            };
            
            const testLead = {
              id: '1',
              name: 'Sarah Chen',
              username: 'sarah_tech',
              bio: 'AI Product Manager at TechCorp. Building the future of automation.',
              followerCount: 2500,
              keywords: ['AI', 'automation', 'SaaS'],
              industry: 'technology',
              hasEngagedWithUs: true
            };
            
            console.log('Generating outreach sequence for qualified lead...');
            const sequence = strategy.getOutreachSequence(testLead, mockQuota);
            
            console.log('Generated Sequence:');
            sequence.forEach((action, index) => {
              console.log(\`\${index + 1}. \${action.action} - \${action.reason}\`);
            });
            
            // Validate sequence
            const hasFollow = sequence.some(a => a.action.includes('follow'));
            const hasLike = sequence.some(a => a.action.includes('like'));
            const hasDM = sequence.some(a => a.action.includes('dm'));
            
            if (hasFollow && hasLike && hasDM) {
              console.log('✅ Sequence includes all required actions');
            } else {
              console.log('❌ Sequence missing required actions');
              process.exit(1);
            }
            
            // Check sequence length (should be conservative)
            if (sequence.length <= 5) {
              console.log('✅ Sequence length is conservative');
            } else {
              console.log('❌ Sequence too aggressive');
              process.exit(1);
            }
          "

  # Test API validation and error handling
  test-api-validation:
    name: Test API Validation & Error Handling
    runs-on: ubuntu-latest
    if: github.event.inputs.test_mode == 'all' || github.event.inputs.test_mode == 'api_validation' || github.event.inputs.test_mode == null
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test API error handling
        run: |
          echo "🛡️ Testing API Error Handling..."
          node -e "
            const TwitterDMClient = require('./utils/twitter-dm-client');
            const client = new TwitterDMClient();
            
            // Test rate limit error handling
            console.log('Testing rate limit error handling...');
            try {
              // Simulate rate limit error
              const rateLimitError = new Error('Rate limit exceeded');
              rateLimitError.code = 429;
              
              if (rateLimitError.code === 429) {
                console.log('✅ Rate limit error detected correctly');
                console.log('Should pause operations for 15 minutes');
              }
            } catch (error) {
              console.log('❌ Error handling failed');
              process.exit(1);
            }
            
            // Test API validation
            console.log('\\nTesting API validation...');
            const requiredSecrets = [
              'TWITTER_API_KEY',
              'TWITTER_API_SECRET',
              'TWITTER_ACCESS_TOKEN',
              'TWITTER_ACCESS_SECRET'
            ];
            
            const missingSecrets = requiredSecrets.filter(secret => !process.env[secret]);
            if (missingSecrets.length === 0) {
              console.log('✅ All required API secrets are present');
            } else {
              console.log('❌ Missing API secrets:', missingSecrets);
              process.exit(1);
            }
          "

  # Generate comprehensive test report
  generate-test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [test-rate-limits, test-lead-qualification, test-outreach-sequences, test-api-validation]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create comprehensive test report
        run: |
          echo "# Conservative Twitter Strategy Test Report" > twitter-strategy-test-report.md
          echo "Generated: $(date)" >> twitter-strategy-test-report.md
          echo "" >> twitter-strategy-test-report.md
          echo "## Test Results:" >> twitter-strategy-test-report.md
          echo "- Rate Limits: ${{ needs.test-rate-limits.result }}" >> twitter-strategy-test-report.md
          echo "- Lead Qualification: ${{ needs.test-lead-qualification.result }}" >> twitter-strategy-test-report.md
          echo "- Outreach Sequences: ${{ needs.test-outreach-sequences.result }}" >> twitter-strategy-test-report.md
          echo "- API Validation: ${{ needs.test-api-validation.result }}" >> twitter-strategy-test-report.md
          echo "" >> twitter-strategy-test-report.md
          echo "## Conservative Strategy Validation:" >> twitter-strategy-test-report.md
          echo "- Daily limits respect Twitter guidelines ✅" >> twitter-strategy-test-report.md
          echo "- Lead qualification filters out bots ✅" >> twitter-strategy-test-report.md
          echo "- Outreach sequences are conservative ✅" >> twitter-strategy-test-report.md
          echo "- Error handling prevents API abuse ✅" >> twitter-strategy-test-report.md
          echo "" >> twitter-strategy-test-report.md
          echo "## Recommendations:" >> twitter-strategy-test-report.md
          echo "- Monitor rate limits daily" >> twitter-strategy-test-report.md
          echo "- Review lead qualification weekly" >> twitter-strategy-test-report.md
          echo "- Adjust sequences based on response rates" >> twitter-strategy-test-report.md
          echo "- Keep API keys secure" >> twitter-strategy-test-report.md

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: twitter-strategy-test-report
          path: twitter-strategy-test-report.md

      - name: Check overall test status
        run: |
          if [[ "${{ needs.test-rate-limits.result }}" == "success" && 
                "${{ needs.test-lead-qualification.result }}" == "success" && 
                "${{ needs.test-outreach-sequences.result }}" == "success" && 
                "${{ needs.test-api-validation.result }}" == "success" ]]; then
            echo "✅ All Twitter strategy tests passed"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Some Twitter strategy tests failed"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi 